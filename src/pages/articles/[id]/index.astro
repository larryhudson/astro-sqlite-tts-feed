---
import {
  getArticleFromDb,
  updateArticleInDb,
  getRelatedLinksForArticle,
} from "@src/utils/db";
import { getCostEstimateForText } from "@src/utils/azure-tts";
import Dump from "@src/components/Dump.astro";
import Layout from "@src/components/Layout.astro";
import JobState from "@src/components/JobState.astro";
import taskQueue from "@src/utils/task-queue";

const { id } = Astro.params;

let statusMessage;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action");

  if (action === "generate-audio") {
    const job = await taskQueue.add("convertTextToSpeech", { articleId: id });
    updateArticleInDb(id, { bullmq_job_id: job.id });
    statusMessage = "Added audio generation to queue";
  }

  if (action === "refetch-content") {
    const job = await taskQueue.add("extractTextFromUrl", {
      articleId: id,
      shouldGenerateAudio: false,
      shouldAddRelatedLinks: true,
    });
    updateArticleInDb(id, { bullmq_job_id: job.id });
    statusMessage = "Added text extraction to queue";
  }

  if (action === "update") {
    const title = formData.get("title");
    const text_content = formData.get("content");

    updateArticleInDb(id, { title, text_content });
    statusMessage = "Article updated";
  }
}

const article = getArticleFromDb(id);

const bullmqJobId = article.bullmq_job_id;

const costEstimate = getCostEstimateForText(article.text_content);

const relatedLinks = getRelatedLinksForArticle(id);
---

<Layout>
  {statusMessage && <p>Status message: {statusMessage}</p>}
  <h1>{article.title}</h1>
  <p>Job state: <JobState id={article.id} jobId={bullmqJobId} /></p>

  <Dump data={article} />

  <h2>Generate audio</h2>
  <p>Cost estimate: ${costEstimate}</p>
  <form method="POST">
    <button name="action" value="generate-audio">Generate audio</button>
  </form>
  <h2>Refetch text content</h2>

  <form method="POST">
    <button name="action" value="refetch-content">Refetch content</button>
  </form>

  <h2>Related links</h2>
  <table-saw ratio="1/3">
    <table>
      <thead>
        <tr>
          <th>Title</th>
          <th>URL</th>
          <th>Context quote</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        {
          relatedLinks.map((link) => (
            <tr>
              <td>{link.title}</td>
              <td class="url-cell">
                <a href={link.url}>{link.url}</a>
              </td>
              <td class="context-quote-cell">{link.context_quote}</td>
              <td>
                <form method="POST" action={`/related-links/${link.id}`}>
                  <button name="action" value="delete">
                    Delete
                  </button>
                  {link.own_article_id ? (
                    <a href={`/articles/${link.own_article_id}`}>
                      Go to article
                    </a>
                  ) : (
                    <button name="action" value="create-article">
                      Create article
                    </button>
                  )}
                </form>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </table-saw>
  <Dump data={relatedLinks} />

  <h2>Edit article text</h2>

  <form method="POST">
    <label>
      Title
      <input name="title" type="text" value={article.title} />
    </label>
    <br />
    <label>
      Content
      <br />
      <textarea style="width: 100%" name="content" rows="30"
        >{article.text_content}</textarea
      >
    </label>
    <button type="submit" name="action" value="update">Save</button>
  </form>
</Layout>

<script>
  import { Tablesaw } from "@zachleat/table-saw";
</script>

<style>
  @media (min-width: 640px) {
    table {
      border-collapse: collapse;
    }

    th,
    td {
      padding: 0.5rem;
      border: 1px solid black;
    }

    .url-cell {
      width: 20%;
    }

    .context-quote-cell {
      width: 30%;
    }
    /* allow a tag to wrap 
  */
  }

  a {
    word-break: break-all;
  }
</style>
