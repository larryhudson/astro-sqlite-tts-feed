---
import { getArticles, deleteArticleFromDb } from "../../utils/db";
import Layout from "@src/components/Layout.astro";
import NewArticleForm from "@src/components/NewArticleForm.astro";
import JobState from "@src/components/JobState.astro";

import { createArticle } from "@src/utils/create-article";

import { checkLoggedIn, addPasswordParamToUrl } from "@src/utils/auth";

const isLoggedIn = checkLoggedIn(Astro);
if (!isLoggedIn) {
  return Astro.redirect("/auth/login");
}

let statusMessage;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const { url, action } = Object.fromEntries(formData.entries());

  const isDeleting = action === "delete";

  if (isDeleting) {
    const idToDelete = parseInt(formData.get("id"));
    const deleted = deleteArticleFromDb(idToDelete);

    if (!deleted) {
      throw new Error(`Couldn't delete article with id ${idToDelete}`);
    }

    statusMessage = "Successfully deleted article!";
  } else if (action === "add") {
    const suppliedTitle = formData.get("title");
    const suppliedTaskType = formData.get("taskType");
    const shouldGenerateAudio = formData.get(
      "generate-audio-after-extracting-content",
    );
    const feedId = formData.get("feed-id");

    await createArticle({
      suppliedTitle,
      suppliedTaskType,
      url,
      feedId,
      shouldGenerateAudio,
      shouldAddRelatedLinks: true,
    });

    statusMessage = "Added to queue!";
  }
}

const pageNumStr = Astro.url.searchParams.get("page") || "0";
const pageNum = parseInt(pageNumStr);

const articles = getArticles({ pageNum });
---

<Layout>
  <h1>Articles</h1>

  {statusMessage && <p>Status message: {statusMessage}</p>}

  <NewArticleForm />

  <table-saw ratio="1/3" zero-padding>
    <table>
      <thead>
        <tr>
          <th>Title</th>
          <th>URL</th>
          <th>Audio</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody>
        {
          articles.map((article) => (
            <tr>
              <td>
                <a href={`/articles/${article.id}/`}>{article.title}</a>
              </td>
              <td>{article.url}</td>
              <td class="audio-container">
                {article.mp3Url ? (
                  <audio controls>
                    <source
                      src={addPasswordParamToUrl(article.mp3Url)}
                      type="audio/mpeg"
                    />
                  </audio>
                ) : (
                  <p>
                    No audio yet. Job state:{" "}
                    <JobState id={article.id} jobId={article.bullmq_job_id} />
                  </p>
                )}
              </td>
              <td>
                <form method="POST">
                  <input type="hidden" name="id" value={article.id} />
                  <button name="action" value="delete">
                    Delete
                  </button>
                </form>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </table-saw>
  <form method="GET">
    <button name="page" value={pageNum + 1}>Next page</button>
  </form>
</Layout>

<style>
  audio {
    height: min-content;
  }
</style>

<script>
  import { Tablesaw } from "@zachleat/table-saw";
</script>
