---
import {
  getArticles,
  createArticleInDb,
  deleteArticleFromDb,
} from "../../utils/db";
import { Queue } from "bullmq";
import Layout from "@src/components/Layout.astro";
import NewArticleForm from "@src/components/NewArticleForm.astro";

import { getArticleTitleFromUrl } from "@src/utils/extract-article";
import { getContentMetadata, checkIfUrlIsSupported } from "@src/utils/yt-dlp";

import { checkLoggedIn, addPasswordParamToUrl } from "@src/utils/auth";
const isLoggedIn = checkLoggedIn(Astro);
if (!isLoggedIn) {
  return Astro.redirect("/auth/login");
}

let statusMessage;

async function getTitleFromUrl(url, taskType) {
  if (taskType === "text-to-speech") {
    return getArticleTitleFromUrl(url);
  }

  if (taskType === "yt-dlp") {
    const metadata = await getContentMetadata(url);
    if (metadata.uploader) {
      return `${metadata.title} - ${metadata.uploader}`;
    } else {
      return metadata.title;
    }
  }
}

async function inferTaskTypeFromUrl(url) {
  const isSupportedByYtDlp = await checkIfUrlIsSupported(url);
  if (isSupportedByYtDlp) {
    console.log("URL is supported by yt-dlp");
    return "yt-dlp";
  } else {
    console.log("URL is not supported, so using text-to-speech");
    return "text-to-speech";
  }
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const { url, action } = Object.fromEntries(formData.entries());

  const suppliedTaskType = formData.get("taskType");
  const taskType =
    suppliedTaskType === "auto"
      ? await inferTaskTypeFromUrl(url)
      : suppliedTaskType;
  const suppliedTitle = formData.get("title");
  const title = suppliedTitle || (await getTitleFromUrl(url, taskType));

  const shouldGenerateAudio = formData.get(
    "generate-audio-after-extracting-content",
  );

  const isDeleting = action === "delete";

  if (isDeleting) {
    const idToDelete = parseInt(formData.get("id"));
    const deleted = deleteArticleFromDb(idToDelete);

    if (!deleted) {
      throw new Error(`Couldn't delete article with id ${idToDelete}`);
    }

    statusMessage = "Successfully deleted article!";
  } else {
    // TODO: if the user doesn't enter a title, get it from the webpage / video automatically
    const requiredFields = [url, taskType];
    if (requiredFields.some((field) => !field)) {
      throw new Error("Missing required fields");
    }

    const createdArticleId = createArticleInDb({
      title,
      url,
    });

    const taskNameForType = {
      "text-to-speech": "extractTextFromUrl",
      "yt-dlp": "ytDlp",
    };

    const taskName = taskNameForType[taskType];

    if (!taskName) {
      throw new Error(`Invalid type: ${taskType}`);
    }

    const taskQueue = new Queue("taskQueue", {
      connection: { host: "127.0.0.1", port: 6379 },
    });
    taskQueue.add(taskName, {
      articleId: createdArticleId,
      shouldGenerateAudio,
    });
    statusMessage = "Added to queue!";
  }
}

const pageNumStr = Astro.url.searchParams.get("page") || "1";
const pageNum = parseInt(pageNumStr);

const articles = getArticles({ pageNum });
---

<Layout>
  <h1>Articles</h1>

  {statusMessage && <p>Status message: {statusMessage}</p>}

  <h2>Add new</h2>
  <NewArticleForm />

  <table-saw ratio="1/3" zero-padding>
    <table>
      <thead>
        <tr>
          <th>Title</th>
          <th>URL</th>
          <th>Audio</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody>
        {
          articles.map((article) => (
            <tr>
              <td>
                <a href={`/articles/${article.id}/`}>{article.title}</a>
              </td>
              <td>{article.url}</td>
              <td class="audio-container">
                {article.mp3Url ? (
                  <audio controls>
                    <source
                      src={addPasswordParamToUrl(article.mp3Url)}
                      type="audio/mpeg"
                    />
                  </audio>
                ) : (
                  <p>No audio yet.</p>
                )}
              </td>
              <td>
                <form method="POST">
                  <input type="hidden" name="id" value={article.id} />
                  <button name="action" value="delete">
                    Delete
                  </button>
                </form>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </table-saw>
  <form method="GET">
    <button name="page" value={pageNum + 1}>Next page</button>
  </form>
</Layout>

<style>
  audio {
    height: min-content;
  }
</style>

<script>
  import { Tablesaw } from "@zachleat/table-saw";
</script>
