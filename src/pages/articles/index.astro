---
import { getArticles, deleteArticleFromDb, executeQuery } from "../../utils/db";
import Layout from "@src/components/Layout.astro";
import NewArticleForm from "@src/components/NewArticleForm.astro";
import JobState from "@src/components/JobState.astro";

import { createArticle } from "@src/utils/create-article";

import { addPasswordParamToUrl } from "@src/utils/auth";

const userId = Astro.locals.userId;

let statusMessage;
let errorMessage;

try {
  if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("action");

    const isDeleting = action === "delete";

    if (isDeleting) {
      const idToDelete = parseInt(formData.get("id"));
      deleteArticleFromDb(idToDelete, userId);
      statusMessage = "Successfully deleted article!";
    } else if (action === "add") {
      // TODO: maybe just pass in the formdata here?
      await createArticle({
        suppliedTitle: formData.get("title"),
        suppliedTaskType: formData.get("taskType"),
        url: formData.get("url"),
        feedId: formData.get("feed-id"),
        shouldGenerateAudio: formData.get(
          "generate-audio-after-extracting-content",
        ),
        shouldAddRelatedLinks: true,
        userId,
      });

      statusMessage = "Added to queue!";
    }
  }

  const pageNumStr = Astro.url.searchParams.get("page") || "0";
  const pageNum = parseInt(pageNumStr);

  const feeds = executeQuery({
    table: "feeds",
    userId,
  });

  // TODO: need to check if the feed belongs to the user

  const articles = getArticles({ pageNum, feedId, userId });
} catch (error) {
  errorMessage = error.message;
  statusMessage = error.message;
}
---

<Layout>
  <h1>Articles</h1>

  {statusMessage && <p>Status message: {statusMessage}</p>}

  <NewArticleForm />

  <form>
    <label
      >Filter by feed:
      <select name="feed-id">
        {
          feeds.map((feed) => (
            <option
              value={feed.id}
              selected={parseInt(feedId) === feed.id ? "" : undefined}
            >
              {feed.title}
            </option>
          ))
        }
      </select>
    </label>
    <button>Filter</button>
  </form>

  <table-saw ratio="1/3" zero-padding>
    <table>
      <thead>
        <tr>
          <th>Title</th>
          <th>URL</th>
          <th>Audio</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody>
        {
          articles.map((article) => (
            <tr>
              <td>
                <a href={`/articles/${article.id}/`}>{article.title}</a>
              </td>
              <td>{article.url}</td>
              <td class="audio-container">
                {article.mp3Url ? (
                  <audio controls>
                    <source
                      src={addPasswordParamToUrl(article.mp3Url)}
                      type="audio/mpeg"
                    />
                  </audio>
                ) : (
                  <p>
                    No audio yet. Job state:{" "}
                    <JobState id={article.id} jobId={article.bullmq_job_id} />
                  </p>
                )}
              </td>
              <td>
                <form method="POST">
                  <input type="hidden" name="id" value={article.id} />
                  <button name="action" value="delete">
                    Delete
                  </button>
                </form>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </table-saw>
  <form method="GET">
    <button name="page" value={pageNum + 1}>Next page</button>
  </form>
</Layout>

<style>
  audio {
    height: min-content;
  }
</style>

<script>
  import { Tablesaw } from "@zachleat/table-saw";
</script>
